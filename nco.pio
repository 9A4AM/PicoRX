.program hello
	set pins, 0
	set pins, 1      ; Drive pin low
	set pins, 3      ; Drive pin high
	set pins, 2      ; Drive pin low

% c-sdk {
static inline float nco_program_init(PIO pio, uint sm, uint offset, float tuned_frequency) {
    pio_sm_config c = hello_program_get_default_config(offset);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, 0, 2);

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, 0);
    pio_gpio_init(pio, 1);

    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 2, true);

    float actual_frequency;
    float div;
    float adjusted_frequency = tuned_frequency;
    while(1)
    {
      //calculate nearest divider
      div = round(256.0f * 125.0e6f / (4.0f*(adjusted_frequency)))/256.0f;
      actual_frequency = 125.0e6f / (4.0f*div); 

      float offset = actual_frequency - tuned_frequency;

      if(fabs(offset) >= 10.0e3f) break;

      if(offset > 0)
      {
        adjusted_frequency += 1.0e3f;
      }
      else
      {
        adjusted_frequency -= 1.0e3f;
      }
    }

    sm_config_set_clkdiv(&c, div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);

    //return actual frequency
    return actual_frequency;
}
%}
