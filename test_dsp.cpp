#include "rx_dsp.h"
#include <cstdio>

int main()
{
  RXDSP rx_dsp(10e3);

  uint16_t samples[RXDSP::block_size]; /*= {
0x0625, 0x062e, 0x063a, 0x063d, 0x0630, 0x062b, 0x062f, 0x062a, 0x062c, 0x0628, 0x0626, 0x0639, 0x062e, 0x0629, 0x05e3, 0x0625, 0x062b, 0x05f6, 0x062e, 0x062b,
0x0628, 0x062e, 0x0631, 0x0632, 0x0630, 0x0628, 0x062c, 0x0630, 0x0641, 0x062e, 0x0631, 0x0630, 0x0633, 0x0631, 0x0635, 0x0631, 0x0614, 0x0629, 0x0635, 0x0609,
0x0637, 0x0631, 0x068e, 0x0634, 0x0635, 0x0634, 0x0638, 0x061c, 0x0635, 0x062c, 0x0636, 0x062e, 0x0635, 0x060b, 0x0631, 0x0631, 0x0631, 0x0632, 0x0631, 0x062d,
0x062d, 0x0620, 0x062e, 0x063b, 0x066e, 0x0637, 0x062c, 0x066e, 0x062c, 0x0635, 0x062a, 0x0631, 0x0622, 0x0637, 0x062b, 0x0623, 0x0629, 0x063d, 0x0611, 0x0638,
0x0631, 0x062c, 0x0630, 0x062e, 0x0633, 0x0632, 0x0646, 0x0634, 0x0634, 0x0658, 0x0630, 0x062f, 0x05d3, 0x0629, 0x0634, 0x062c, 0x0638, 0x0636, 0x0634, 0x0632,
0x0629, 0x0630, 0x063f, 0x0640, 0x063a, 0x0630, 0x0639, 0x0631, 0x0636, 0x0636, 0x0638, 0x063e, 0x0639, 0x062f, 0x05eb, 0x062c, 0x062f, 0x05fd, 0x0635, 0x0634,
0x0632, 0x0639, 0x0636, 0x063b, 0x0634, 0x063a, 0x062b, 0x0639, 0x0638, 0x0638, 0x062c, 0x0635, 0x062b, 0x0638, 0x062d, 0x0637, 0x060b, 0x062d, 0x062e, 0x0605,
0x0633, 0x0632, 0x0661, 0x0630, 0x062c, 0x062b, 0x0632, 0x061d, 0x0638, 0x061d, 0x062a, 0x062c, 0x0632, 0x0606, 0x0630, 0x062b, 0x0633, 0x062d, 0x0635, 0x0629,
0x0633, 0x0618, 0x0635, 0x0630, 0x067e, 0x0631, 0x0635, 0x064c, 0x0635, 0x0633, 0x0632, 0x0632, 0x062c, 0x0638, 0x0638, 0x0623, 0x0632, 0x063e, 0x061a, 0x0639,
0x0631, 0x0638, 0x0632, 0x063d, 0x0630, 0x0642, 0x0643, 0x063c, 0x0631, 0x0662, 0x0622, 0x063b, 0x05f5, 0x0638, 0x062d, 0x0638, 0x0630, 0x063e, 0x062a, 0x0638,
0x061d, 0x0634, 0x0633, 0x063f, 0x062a, 0x0632, 0x0623, 0x0632, 0x0626, 0x0630, 0x0628, 0x0640, 0x0628, 0x062c, 0x05dd, 0x062a, 0x0628, 0x060e, 0x062e, 0x0631,
0x062b, 0x063b, 0x0631, 0x0636, 0x0630, 0x0635, 0x062e, 0x0636, 0x063e, 0x063b, 0x0631, 0x063d, 0x0631, 0x0638, 0x0634, 0x063a, 0x0612, 0x0633, 0x0632, 0x060f,
0x0635, 0x063b, 0x0662, 0x063c, 0x0634, 0x063f, 0x0637, 0x062a, 0x0630, 0x0635, 0x0632, 0x0638, 0x0632, 0x0615, 0x062e, 0x0639, 0x062b, 0x0633, 0x062d, 0x062b,
0x062d, 0x061a, 0x062c, 0x0634, 0x066e, 0x0633, 0x062b, 0x0649, 0x062f, 0x062e, 0x062a, 0x062c, 0x0621, 0x0633, 0x0632, 0x0620, 0x062e, 0x063a, 0x0616, 0x063a,
0x063a, 0x062c, 0x063b, 0x0631, 0x0631, 0x0633, 0x0650, 0x0633, 0x0639, 0x0654, 0x063e, 0x0634, 0x05ff, 0x062e, 0x063d, 0x0635, 0x0643, 0x063c, 0x063e, 0x0636,
0x062c, 0x0636, 0x0641, 0x0646, 0x0633, 0x0632, 0x063b, 0x0638, 0x0635, 0x063a, 0x0635, 0x064a, 0x0630, 0x0638, 0x05e3, 0x0633, 0x062d, 0x0619, 0x0630, 0x063a,
0x0629, 0x0640, 0x0630, 0x063d, 0x0632, 0x0639, 0x0622, 0x062c, 0x0640, 0x0639, 0x062e, 0x0636, 0x0634, 0x0635, 0x0634, 0x0634, 0x0616, 0x062e, 0x063a, 0x0609,
0x063d, 0x062d, 0x066d, 0x0632, 0x063d, 0x0631, 0x0643, 0x0620, 0x063d, 0x0629, 0x0644, 0x0632, 0x0641, 0x060c, 0x063a, 0x0631, 0x063a, 0x0632, 0x063a, 0x062c,
0x0633, 0x061c, 0x0635, 0x0639, 0x0677, 0x063b, 0x0631, 0x0651, 0x0633, 0x0635, 0x0631, 0x0639, 0x0629, 0x063c, 0x0636, 0x0628, 0x0631, 0x0642, 0x0612, 0x0641,
0x063b, 0x0688, 0x0635, 0x0637, 0x0634, 0x063c, 0x064a, 0x063c, 0x0634, 0x065b, 0x0639, 0x0636, 0x05ff, 0x062e, 0x0639, 0x0631, 0x063c, 0x063b, 0x0637, 0x0635,
0x062a, 0x0631, 0x063e, 0x063b, 0x063a, 0x0631, 0x0672, 0x062f, 0x0635, 0x0630, 0x063c, 0x063e, 0x063c, 0x062e, 0x05ef, 0x062c, 0x0635, 0x0610, 0x0647, 0x0635,
0x0637, 0x063c, 0x0640, 0x063c, 0x063b, 0x0639, 0x0636, 0x063b, 0x0649, 0x063d, 0x063c, 0x05e8, 0x063b, 0x0641, 0x063d, 0x063e, 0x0623, 0x0634, 0x063e, 0x0612,
0x063d, 0x063c, 0x066d, 0x063c, 0x063b, 0x063a, 0x063d, 0x0626, 0x063a, 0x062f, 0x0638, 0x0631, 0x0638, 0x060d, 0x0633, 0x062d, 0x05f8, 0x0631, 0x0639, 0x0628,
0x0634, 0x0616, 0x0632, 0x0632, 0x0672, 0x0630, 0x0630, 0x0645, 0x0633, 0x062e, 0x0631, 0x0632, 0x062b, 0x0630, 0x0638, 0x0623, 0x0634, 0x0638, 0x061a, 0x0638,
0x063d, 0x0685, 0x063a, 0x063a, 0x063a, 0x0646, 0x064a, 0x063c, 0x0640, 0x065e, 0x0638, 0x063c, 0x05ff, 0x0636, 0x063b, 0x0636, 0x0643, 0x0642, 0x063b, 0x063c,
0x0629, 0x0635, 0x063a, 0x0641, 0x0635, 0x0634, 0x0674, 0x0632, 0x062e, 0x0631, 0x0635, 0x0643, 0x062c, 0x0631, 0x05e5, 0x062c, 0x062c, 0x060a, 0x0629, 0x0634,
0x062c, 0x0636, 0x0633, 0x0636, 0x0630, 0x0633, 0x062c, 0x0632, 0x0641, 0x0637, 0x062c, 0x05dc, 0x062a, 0x063b, 0x062f, 0x0634, 0x0610, 0x062e, 0x0632, 0x0611,
0x0635, 0x0635, 0x0666, 0x063a, 0x0636, 0x0636, 0x063b, 0x0623, 0x0633, 0x0632, 0x0636, 0x0632, 0x0636, 0x060f, 0x0633, 0x0634, 0x05f3, 0x0634, 0x0631, 0x062e,
0x062f, 0x0618, 0x0628, 0x0630, 0x0670, 0x0637, 0x0629, 0x064c, 0x062d, 0x0633, 0x062b, 0x0634, 0x0626, 0x0635, 0x0630, 0x0601, 0x062e, 0x063a, 0x0612, 0x0638,
0x0634, 0x067d, 0x0630, 0x0634, 0x0632, 0x063d, 0x0641, 0x0636, 0x063b, 0x0658, 0x0639, 0x0630, 0x05ff, 0x062c, 0x063b, 0x062e, 0x0641, 0x0636, 0x063b, 0x0633,
0x062c, 0x0628, 0x0636, 0x0641, 0x0639, 0x0631, 0x0674, 0x062e, 0x0632, 0x0632, 0x0631, 0x0644, 0x0630, 0x0632, 0x05e6, 0x062e, 0x062e, 0x0615, 0x0631, 0x0634,
0x062a, 0x063d, 0x0632, 0x063d, 0x062d, 0x063e, 0x062a, 0x063d, 0x0641, 0x063e, 0x0631, 0x05e1, 0x0630, 0x063d, 0x0631, 0x0639, 0x0612, 0x0632, 0x0633, 0x060c,
0x0634, 0x0639, 0x0668, 0x063a, 0x0637, 0x0636, 0x063d, 0x0621, 0x0635, 0x062b, 0x063a, 0x062f, 0x063a, 0x060d, 0x0636, 0x0634, 0x05f9, 0x0631, 0x0638, 0x0625,
0x0633, 0x0614, 0x0634, 0x062d, 0x0674, 0x0630, 0x0634, 0x0648, 0x0634, 0x062c, 0x062e, 0x062d, 0x062a, 0x0632, 0x0635, 0x061c, 0x0630, 0x0636, 0x0615, 0x0639,
0x0638, 0x0682, 0x0630, 0x0635, 0x0630, 0x063a, 0x0643, 0x063a, 0x0635, 0x065b, 0x0633, 0x0638, 0x05f8, 0x0631, 0x0632, 0x0638, 0x063d, 0x063b, 0x0633, 0x0633,
0x0626, 0x0631, 0x0638, 0x063e, 0x0630, 0x0630, 0x066d, 0x062e, 0x0630, 0x0626, 0x062a, 0x063b, 0x062b, 0x062d, 0x05de, 0x0629, 0x062d, 0x0610, 0x062e, 0x0631,
0x0629, 0x063a, 0x0633, 0x0639, 0x0630, 0x0638, 0x062d, 0x0635, 0x0641, 0x0638, 0x0631, 0x05de, 0x0631, 0x063b, 0x062f, 0x0639, 0x060d, 0x062a, 0x0630, 0x060e,
0x0635, 0x0638, 0x0668, 0x063c, 0x0634, 0x063a, 0x063a, 0x0625, 0x0632, 0x0632, 0x0642, 0x0633, 0x0634, 0x060f, 0x0631, 0x0635, 0x05f2, 0x0633, 0x0633, 0x0626,
0x062b, 0x061d, 0x0623, 0x0638, 0x066c, 0x0636, 0x0629, 0x064e, 0x062c, 0x0634, 0x062b, 0x0633, 0x0624, 0x063a, 0x062a, 0x0618, 0x0630, 0x063d, 0x0618, 0x0639,
0x063a, 0x0688, 0x0634, 0x063a, 0x0638, 0x063e, 0x064d, 0x063f, 0x063e, 0x0658, 0x063b, 0x063c, 0x05fb, 0x0639, 0x063d, 0x063b, 0x0642, 0x0642, 0x0638, 0x063d,
0x062a, 0x063b, 0x0640, 0x0649, 0x0639, 0x063a, 0x066c, 0x063a, 0x0635, 0x063c, 0x0634, 0x064a, 0x0632, 0x0638, 0x05ea, 0x0635, 0x0632, 0x0619, 0x0636, 0x0638,
0x062e, 0x0640, 0x0638, 0x063c, 0x0636, 0x063a, 0x0631, 0x0641, 0x0649, 0x0640, 0x0637, 0x05e3, 0x0637, 0x063c, 0x0638, 0x063c, 0x0619, 0x0634, 0x0634, 0x0609,
0x0641, 0x063b, 0x0670, 0x063c, 0x0641, 0x063a, 0x0643, 0x0626, 0x063d, 0x0632, 0x063e, 0x0638, 0x063e, 0x060c, 0x063d, 0x0638, 0x05f6, 0x0635, 0x063c, 0x062c,
0x0638, 0x061e, 0x0639, 0x063b, 0x067a, 0x0636, 0x0639, 0x0651, 0x0634, 0x0636, 0x0632, 0x063a, 0x062c, 0x063c, 0x0639, 0x0626, 0x0633, 0x0646, 0x0615, 0x0646,
0x063d, 0x0689, 0x0633, 0x063b, 0x0636, 0x063e, 0x0649, 0x0641, 0x0637, 0x0661, 0x063a, 0x063a, 0x05f9, 0x062d, 0x063a, 0x063b, 0x063d, 0x063d, 0x0638, 0x0639,
0x0629, 0x0635, 0x063c, 0x0644, 0x0638, 0x0632, 0x0677, 0x0630, 0x063b, 0x0630, 0x0638, 0x0641, 0x0635, 0x062d, 0x05e9, 0x0629, 0x0636, 0x0610, 0x0636, 0x0630,
0x0634, 0x063c, 0x0640, 0x0637, 0x0638, 0x0634, 0x0636, 0x0634, 0x064b, 0x0636, 0x0637, 0x05dd, 0x0636, 0x063a, 0x063b, 0x063a, 0x0618, 0x0626, 0x0633, 0x060a,
0x063c, 0x0634, 0x066b, 0x0633, 0x063a, 0x0632, 0x063d, 0x061e, 0x0639, 0x062a, 0x063b, 0x062b, 0x0632, 0x0609, 0x0636, 0x062a, 0x05f6, 0x062e, 0x063a, 0x0624,
0x0635, 0x0612, 0x0638, 0x062e, 0x0679, 0x062a, 0x0635, 0x0644, 0x0635, 0x0624, 0x0632, 0x0630, 0x062f, 0x062e, 0x063b, 0x061a, 0x0634, 0x0636, 0x061a, 0x0634,
0x063d, 0x067e, 0x0631, 0x0632, 0x0638, 0x0636, 0x064c, 0x0636, 0x063c, 0x065a, 0x063c, 0x0635, 0x05ff, 0x0631, 0x0638, 0x062e, 0x063b, 0x063d, 0x063a, 0x0635,
  };*/

  int16_t i[RXDSP::block_size];
  int16_t q[RXDSP::block_size];

  for(uint16_t idx=0; idx<RXDSP::block_size; idx++)
  {
      unsigned int sample;
      scanf("%x", &sample);
      samples[idx] = sample;
  }

  rx_dsp.process_block(samples, i, q);
  const uint16_t num_output_samples = rx_dsp.process_block(samples, i, q);

  for(uint16_t idx=0; idx<num_output_samples; idx++)
  {
      if(q[idx] < 0){
        printf("%0i%0ij, ", i[idx], q[idx]);
      }
      else{
        printf("%0i+%0ij, ", i[idx], q[idx]);
      }
  }

}
